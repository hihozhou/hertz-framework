#!/usr/bin/env php

<?php

echo "初始: " . memory_get_usage() . "B\n";


//定义项目的跟目录

define('HERTZ_ROOT_PATH', realpath(getcwd()));
//开发或开发包形式加载composer自动加载
foreach ([__DIR__ . '/../../../autoload.php', __DIR__ . '/../vendor/autoload.php'] as $file) {
    if (file_exists($file)) {
        require $file;
        break;
    }
}

//创建app容器
$app = new \HihoZhou\Hertz\Application(
    realpath(HERTZ_ROOT_PATH)
);

//引入路由配置文件进行注册路由
$app->router->group([
    'namespace' => 'App\Http\Controllers',
], function ($router) {
    require HERTZ_ROOT_PATH . '/routes/web.php';
});


//$app->router->group([
//    'namespace' => 'App\Http\Controllers',
//], function ($router) {
//    require __DIR__ . '/../routes/web.php';
//});

//$dispatcher = \FastRoute\simpleDispatcher(function ($r) {
//    $routeOption = [
////            'middleware' => [],
////            'prefix' => '',
//        'method' => 'GET',
//        'uri' => '/index/haha',
//        'namespace' => "\\App\\Http\\Controllers\\",
//        'controller' => "IndexController",
//        'action' => "haha",
//    ];
//    $r->addRoute($routeOption['method'], $routeOption['uri'], $routeOption);
//});
//var_dump($dispatcher->dispatch('GET','/index/haha'));exit;
//todo 注册路由
// 添加路由，注册所有路由规则
//$route = new \HihoZhou\Hertz\Routing\Router($app);
//$route->addRoute('GET','/haha','IndexController@haha');
//var_dump($route);exit;


//路由调度

//todo 路由区分web和api和socket
//todo 路由注入到容器中


//$redis = new Redis();

/**
 * 解析输入的命令
 * @return array
 */
function commandParser()
{
    global $argv;
    $command = '';
    $options = array();
    if (isset($argv[1])) {
        $command = $argv[1];
    }
    foreach ($argv as $item) {
        if (substr($item, 0, 2) === '--') {
            $temp = trim($item, "--");
            $temp = explode("-", $temp);
            $key = array_shift($temp);
            $options[$key] = array_shift($temp) ?: '';
        }
    }
    return array($command, $options);
}


/**
 * 帮助显示
 *
 * @param $options
 */
function showHelp($options)
{
    $opName = '';
    $args = array_keys($options);
    if ($args) $opName = $args[0];

    switch ($opName) {
        default:
            echo <<<DEFAULTHELP

\e[33mUsage:\e[0m
  Hertz [operate] [option]

\e[33mOperate:\e[0m
\e[32m  start \e[0m        Start Server
\e[32m  stop \e[0m         Stop Server
\e[32m  reload \e[0m       Reload Server
\e[32m  restart \e[0m      Restart Server

\e[32m  help \e[0m         Print Help (this message) and exit\n
DEFAULTHELP;
    }
}


/**
 * @author hihozhou
 * 命令执行
 */
function commandHandler()
{
    list($command, $options) = commandParser();
    switch ($command) {
        case 'start':
            serverStart($options);
            break;
        case 'stop':
        case 'reload':
        case 'install':
        case 'restart':
        case 'help':
        default:
            showHelp($options);
    }
}


/**
 *
 * @param $options
 */
function serverStart($options)
{
    global $app;
    //通过配置，配置服务器地址和端口
    $server = new swoole_websocket_server(config('app.host'), config('app.port'));
//    $server = new swoole_websocket_server('0.0.0.0', 9501);
    $server->on('open', function (swoole_websocket_server $server, $request) {
        echo "server: handshake success with fd{$request->fd}\n";
    });
    $server->on('message', function (swoole_websocket_server $server, $frame) use ($app) {
        $server->push($frame->fd, "This message is from swoole websocket server.");
//        $server->push($frame->fd, "This message is from swoole websocket server.");
        switch ($frame->opcode) {
            case WEBSOCKET_OPCODE_TEXT:

//                //todo 通过配置解析器
//                //todo 解析的到模块，控制器，方法
                $data = json_decode($frame->data, true);
                if ($data) {
                    if (isset($data['uri'])) {
                        $request = \Illuminate\Http\Request::capture();
                        $request->setMethod('ws');
                        $request->server->set('REQUEST_URI', $data['uri']);
                        $app->dispatch($request);
                    }
                }
                break;
            case WEBSOCKET_OPCODE_BINARY;
                break;
        }
        echo "使用: " . memory_get_usage() . "B\n";
        echo "峰值: " . memory_get_peak_usage() . "B\n";
//        echo "receive from {$frame->fd}:{$frame->data},opcode:{$frame->opcode},fin:{$frame->finish}\n";
//        $server->push($frame->fd, "This message is from swoole websocket server.");
    });
    $server->on('close', function ($ser, $fd) {
        echo "client {$fd} closed\n";
    });
    echo "使用: " . memory_get_usage() . "B\n";
    echo "峰值: " . memory_get_peak_usage() . "B\n";
    $server->start();
}

commandHandler();